question,answer,context,result,model_name,temperature,error
How many singers do we have?,SELECT count(*) FROM singer,"CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID""))",SELECT COUNT(*) FROM singers,gpt-3.5-turbo-0125,0.0,
What is the total number of singers?,SELECT count(*) FROM singer,"CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID""))",SELECT COUNT(*) AS total_singers FROM stadium,gpt-3.5-turbo-0125,0.0,
"Show name, country, age for all singers ordered by age from the oldest to the youngest.","SELECT name ,  country ,  age FROM singer ORDER BY age DESC","CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID""))","SELECT Name, Country, Age FROM singers ORDER BY Age DESC",gpt-3.5-turbo-0125,0.0,
"What are the names, countries, and ages for every singer in descending order of age?","SELECT name ,  country ,  age FROM singer ORDER BY age DESC","CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID""))","SELECT Name, Country, Age FROM Singer ORDER BY Age DESC",gpt-3.5-turbo-0125,0.0,
"What is the average, minimum, and maximum age of all singers from France?","SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'","CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID""))","SELECT AVG(age) AS average_age, MIN(age) AS min_age, MAX(age) AS max_age FROM singers WHERE country = 'France'",gpt-3.5-turbo-0125,0.0,
"What is the average, minimum, and maximum age for all French singers?","SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'","CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID""))","SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age FROM singers WHERE Nationality = 'French'",gpt-3.5-turbo-0125,0.0,
Show the name and the release year of the song by the youngest singer.,"SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1","CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID""))","SELECT Name, Release_Year FROM Singer ORDER BY Age ASC LIMIT 1",gpt-3.5-turbo-0125,0.0,
What are the names and release years for all the songs of the youngest singer?,"SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1","CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID""))","SELECT Name, Release_Year FROM Songs WHERE Singer_ID = (SELECT Singer_ID FROM Singers ORDER BY Age LIMIT 1)",gpt-3.5-turbo-0125,0.0,
What are all distinct countries where singers above age 20 are from?,SELECT DISTINCT country FROM singer WHERE age  >  20,"CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID""))",SELECT DISTINCT Country FROM Singers WHERE Age > 20,gpt-3.5-turbo-0125,0.0,
What are  the different countries with singers above age 20?,SELECT DISTINCT country FROM singer WHERE age  >  20,"CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID""))",SELECT DISTINCT Country FROM singers WHERE Age > 20,gpt-3.5-turbo-0125,0.0,
Show all countries and the number of singers in each country.,"SELECT country ,  count(*) FROM singer GROUP BY country","CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID""))","SELECT Country, COUNT(Singer) AS Number_of_Singers FROM Singers GROUP BY Country;",gpt-3.5-turbo-0125,0.0,
How many singers are from each country?,"SELECT country ,  count(*) FROM singer GROUP BY country","CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID""))","SELECT COUNT(singer_name) AS num_singers, country FROM singers GROUP BY country;",gpt-3.5-turbo-0125,0.0,
List all song names by singers above the average age.,SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer),"CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID""))",SELECT Name FROM singers WHERE Age > (SELECT AVG(Age) FROM singers),gpt-3.5-turbo-0125,0.0,
What are all the song names by singers who are older than average?,SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer),"CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID""))",SELECT Name FROM stadium WHERE Average > (SELECT AVG(Average) FROM stadium),gpt-3.5-turbo-0125,0.0,
Show location and name for all stadiums with a capacity between 5000 and 10000.,"SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000","CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID""))","SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;",gpt-3.5-turbo-0125,0.0,
What are the locations and names of all stations with capacity between 5000 and 10000?,"SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000","CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID""))","SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000",gpt-3.5-turbo-0125,0.0,
What is the maximum capacity and the average of all stadiums ?,"select max(capacity), average from stadium","CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID""))","SELECT MAX(Capacity) AS Maximum_Capacity, AVG(Capacity) AS Average_Capacity FROM stadium",gpt-3.5-turbo-0125,0.0,
What is the average and maximum capacities for all stadiums ?,"select avg(capacity) ,  max(capacity) from stadium","CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID""))","SELECT AVG(Capacity) AS Average_Capacity, MAX(Capacity) AS Maximum_Capacity FROM stadium",gpt-3.5-turbo-0125,0.0,
What is the name and capacity for the stadium with highest average attendance?,"SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1","CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID""))","SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium)",gpt-3.5-turbo-0125,0.0,
What is the name and capacity for the stadium with the highest average attendance?,"SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1","CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID""))","SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium)",gpt-3.5-turbo-0125,0.0,
How many concerts are there in year 2014 or 2015?,SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015,"CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID""))",SELECT COUNT(*) FROM concerts WHERE year = 2014 OR year = 2015,gpt-3.5-turbo-0125,0.0,
How many concerts occurred in 2014 or 2015?,SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015,"CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID""))",SELECT COUNT(*) FROM concerts WHERE year = 2014 OR year = 2015,gpt-3.5-turbo-0125,0.0,
Show the stadium name and the number of concerts in each stadium.,"SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id","CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID""))","SELECT s.Name AS Stadium_Name, COUNT(c.Concert_ID) AS Number_of_Concerts FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID GROUP BY s.Name;",gpt-3.5-turbo-0125,0.0,
"For each stadium, how many concerts play there?","SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id","CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID""))","SELECT s.Name AS Stadium, COUNT(c.Concert_ID) AS Num_Concerts_Played FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID GROUP BY s.Name;",gpt-3.5-turbo-0125,0.0,
Show the stadium name and capacity with most number of concerts in year 2014 or after.,"SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1","CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID""))","SELECT Name, Capacity FROM stadium WHERE Highest >= 2014 ORDER BY Highest DESC LIMIT 1",gpt-3.5-turbo-0125,0.0,
What is the name and capacity of the stadium with the most concerts after 2013 ?,"select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1","CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID""))","SELECT Name, Capacity FROM stadium WHERE Highest > 2013 ORDER BY Highest DESC LIMIT 1",gpt-3.5-turbo-0125,0.0,
Which year has most number of concerts?,SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1,"CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID""))","SELECT year, COUNT(*) AS num_concerts FROM concerts GROUP BY year ORDER BY num_concerts DESC LIMIT 1;",gpt-3.5-turbo-0125,0.0,
What is the year that had the most concerts?,SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1,"CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID""))","SELECT year, COUNT(*) as num_concerts FROM concerts GROUP BY year ORDER BY num_concerts DESC LIMIT 1",gpt-3.5-turbo-0125,0.0,
Show the stadium names without any concert.,SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert),"CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID""))",SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert),gpt-3.5-turbo-0125,0.0,
What are the names of the stadiums without any concerts?,SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert),"CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID""))",SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concerts),gpt-3.5-turbo-0125,0.0,
Show countries where a singer above age 40 and a singer below 30 are from.,SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30,"CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID""))",SELECT DISTINCT Location FROM stadium WHERE Highest > 40 AND Lowest < 30;,gpt-3.5-turbo-0125,0.0,
Show names for all stadiums except for stadiums having a concert in year 2014.,SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014,"CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID""))",SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = 2014),gpt-3.5-turbo-0125,0.0,
What are the names of all stadiums that did not have a concert in 2014?,SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014,"CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID""))",SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = 2014),gpt-3.5-turbo-0125,0.0,
Show the name and theme for all concerts and the number of singers in each concert.,"SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id","CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID""))","SELECT Concert.Name, Concert.Theme, COUNT(Singer.Concert_ID) AS Number_of_Singers FROM Concert JOIN Singer ON Concert.Concert_ID = Singer.Concert_ID GROUP BY Concert.Name, Concert.Theme;",gpt-3.5-turbo-0125,0.0,
"What are the names , themes , and number of singers for every concert ?","select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id","CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID""))","SELECT Concert.Name, Concert.Theme, COUNT(Singer.Name) AS Number_of_Singers FROM Concert JOIN Singer ON Concert.Concert_ID = Singer.Concert_ID GROUP BY Concert.Name, Concert.Theme;",gpt-3.5-turbo-0125,0.0,
List singer names and number of concerts for each singer.,"SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id","CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID""))","SELECT Singer.Name, COUNT(Concert.Concert_ID) AS Number_of_Concerts FROM Singer JOIN Concert ON Singer.Singer_ID = Concert.Singer_ID GROUP BY Singer.Name;",gpt-3.5-turbo-0125,0.0,
What are the names of the singers and number of concerts for each person?,"SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id","CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID""))","SELECT Name, COUNT(Concert_ID) AS Number_of_Concerts FROM singers JOIN concerts ON singers.Singer_ID = concerts.Singer_ID GROUP BY Name;",gpt-3.5-turbo-0125,0.0,
List all singer names in concerts in year 2014.,SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014,"CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID""))",SELECT DISTINCT singer_name FROM concerts WHERE year = 2014,gpt-3.5-turbo-0125,0.0,
What are the names of the singers who performed in a concert in 2014?,SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014,"CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID""))",SELECT DISTINCT Singer_Name FROM Concerts WHERE Year = 2014,gpt-3.5-turbo-0125,0.0,
what is the name and nation of the singer who have a song having 'Hey' in its name?,"SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'","CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID""))","SELECT singer.Name, singer.Nation FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Name LIKE '%Hey%'",gpt-3.5-turbo-0125,0.0,
What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?,"SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'","CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID""))","SELECT Singer.Name, Singer.Country FROM Singer JOIN Song ON Singer.Singer_ID = Song.Singer_ID WHERE Song.Title LIKE '%Hey%'",gpt-3.5-turbo-0125,0.0,
Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.,"SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015","CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID""))","SELECT Name, Location FROM stadium WHERE Stadium_ID IN (SELECT Stadium_ID FROM concerts WHERE Year = 2014) AND Stadium_ID IN (SELECT Stadium_ID FROM concerts WHERE Year = 2015)",gpt-3.5-turbo-0125,0.0,
What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?,"SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015","CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID""))","SELECT Name, Location FROM stadium WHERE Stadium_ID IN (SELECT Stadium_ID FROM concerts WHERE Year = 2014) AND Stadium_ID IN (SELECT Stadium_ID FROM concerts WHERE Year = 2015)",gpt-3.5-turbo-0125,0.0,
Find the number of concerts happened in the stadium with the highest capacity .,select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1),"CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID""))",SELECT COUNT(*) FROM stadium WHERE Capacity = (SELECT MAX(Capacity) FROM stadium),gpt-3.5-turbo-0125,0.0,
What are the number of concerts that occurred in the stadium with the largest capacity ?,select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1),"CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID"")); CREATE TABLE ""stadium"" (""Stadium_ID"" int,""Location"" text,""Name"" text,""Capacity"" int,""Highest"" int,""Lowest"" int,""Average"" int,PRIMARY KEY (""Stadium_ID""))",SELECT COUNT(*) FROM stadium WHERE Capacity = (SELECT MAX(Capacity) FROM stadium),gpt-3.5-turbo-0125,0.0,
Find the number of pets whose weight is heavier than 10.,SELECT count(*) FROM pets WHERE weight  >  10,"CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3))",SELECT COUNT(*) FROM Pets WHERE weight > 10,gpt-3.5-turbo-0125,0.0,
How many pets have a greater weight than 10?,SELECT count(*) FROM pets WHERE weight  >  10,"CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3))",SELECT COUNT(*) FROM Pets WHERE weight > 10,gpt-3.5-turbo-0125,0.0,
Find the weight of the youngest dog.,SELECT weight FROM pets ORDER BY pet_age LIMIT 1,"CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3))",SELECT MIN(weight) FROM Dogs WHERE age = (SELECT MIN(age) FROM Dogs),gpt-3.5-turbo-0125,0.0,
How much does the youngest dog weigh?,SELECT weight FROM pets ORDER BY pet_age LIMIT 1,"CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3))",SELECT MIN(Weight) FROM Dogs WHERE Age = (SELECT MIN(Age) FROM Dogs),gpt-3.5-turbo-0125,0.0,
Find the maximum weight for each type of pet. List the maximum weight and pet type.,"SELECT max(weight) ,  petType FROM pets GROUP BY petType","CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3))","SELECT MAX(weight) AS max_weight, pet_type FROM Pets GROUP BY pet_type;",gpt-3.5-turbo-0125,0.0,
List the maximum weight and type for each type of pet.,"SELECT max(weight) ,  petType FROM pets GROUP BY petType","CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3))","SELECT pet_type, MAX(weight) AS max_weight FROM pets GROUP BY pet_type;",gpt-3.5-turbo-0125,0.0,
Find number of pets owned by students who are older than 20.,SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20,"CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3))",SELECT COUNT(*) AS num_pets FROM Pet p JOIN Student s ON p.StuID = s.StuID WHERE s.Age > 20,gpt-3.5-turbo-0125,0.0,
How many pets are owned by students that have an age greater than 20?,SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20,"CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3))",SELECT COUNT(*) AS num_pets FROM Pet p JOIN Student s ON p.StuID = s.StuID WHERE s.Age > 20,gpt-3.5-turbo-0125,0.0,
Find the number of dog pets that are raised by female students (with sex F).,SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog',"CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3))",SELECT COUNT(*) FROM Student WHERE Sex = 'F' AND StuID IN (SELECT StuID FROM Pet WHERE PetType = 'dog'),gpt-3.5-turbo-0125,0.0,
How many dog pets are raised by female students?,SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog',"CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3))",SELECT COUNT(*) FROM Student WHERE Sex = 'F' AND StuID IN (SELECT StuID FROM Pet WHERE PetType = 'Dog'),gpt-3.5-turbo-0125,0.0,
Find the number of distinct type of pets.,SELECT count(DISTINCT pettype) FROM pets,"CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3))",SELECT COUNT(DISTINCT type) AS num_distinct_pets FROM Pets,gpt-3.5-turbo-0125,0.0,
How many different types of pet are there?,SELECT count(DISTINCT pettype) FROM pets,"CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3))",SELECT COUNT(DISTINCT pet_type) AS num_types FROM Pet,gpt-3.5-turbo-0125,0.0,
Find the first name of students who have cat or dog pet.,SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog',"CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3))","SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Pet WHERE PetType IN ('cat', 'dog'))",gpt-3.5-turbo-0125,0.0,
What are the first names of every student who has a cat or dog as a pet?,SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog',"CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3))",SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Pet WHERE PetType = 'cat' OR PetType = 'dog'),gpt-3.5-turbo-0125,0.0,
Find the first name of students who have both cat and dog pets .,select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog',"CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3))",SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Pets WHERE PetType = 'cat') AND StuID IN (SELECT StuID FROM Pets WHERE PetType = 'dog'),gpt-3.5-turbo-0125,0.0,
What are the students' first names who have both cats and dogs as pets?,SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog',"CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3))",SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Pets WHERE PetType = 'cat') AND StuID IN (SELECT StuID FROM Pets WHERE PetType = 'dog'),gpt-3.5-turbo-0125,0.0,
Find the major and age of students who do not have a cat pet.,"SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')","CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3))","SELECT Major, Age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Pet WHERE PetType = 'cat')",gpt-3.5-turbo-0125,0.0,
"What major is every student who does not own a cat as a pet, and also how old are they?","SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')","CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3))","SELECT Major, Age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Pet WHERE PetType = 'Cat')",gpt-3.5-turbo-0125,0.0,
Find the id of students who do not have a cat pet.,SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat',"CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3))",SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Pet WHERE PetType = 'cat'),gpt-3.5-turbo-0125,0.0,
What are the ids of the students who do not own cats as pets?,SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat',"CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3))",SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Pet WHERE PetType = 'Cat'),gpt-3.5-turbo-0125,0.0,
Find the first name and age of students who have a dog but do not have a cat as a pet.,"SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')","CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3))","SELECT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Pets WHERE PetType = 'dog') AND StuID NOT IN (SELECT StuID FROM Pets WHERE PetType = 'cat')",gpt-3.5-turbo-0125,0.0,
What is the first name of every student who has a dog but does not have a cat?,"SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')","CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3))",SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM StudentPets WHERE PetType = 'dog') AND StuID NOT IN (SELECT StuID FROM StudentPets WHERE PetType = 'cat'),gpt-3.5-turbo-0125,0.0,
Find the type and weight of the youngest pet.,"SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1","CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3))","SELECT type, weight FROM Pet ORDER BY age LIMIT 1;",gpt-3.5-turbo-0125,0.0,
"What type of pet is the youngest animal, and how much does it weigh?","SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1","CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3))","SELECT pet_type, weight FROM Animals ORDER BY age LIMIT 1",gpt-3.5-turbo-0125,0.0,
Find the id and weight of all pets whose age is older than 1.,"SELECT petid ,  weight FROM pets WHERE pet_age  >  1","CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3))","SELECT id, weight FROM pets WHERE age > 1",gpt-3.5-turbo-0125,0.0,
What is the id and weight of every pet who is older than 1?,"SELECT petid ,  weight FROM pets WHERE pet_age  >  1","CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3))","SELECT id, weight FROM pet WHERE age > 1",gpt-3.5-turbo-0125,0.0,
Find the average and maximum age for each type of pet.,"SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype","CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3))","SELECT AVG(Age) AS average_age, MAX(Age) AS max_age, pet_type FROM Pets GROUP BY pet_type;",gpt-3.5-turbo-0125,0.0,
What is the average and maximum age for each pet type?,"SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype","CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3))","SELECT pet_type, AVG(age) AS average_age, MAX(age) AS max_age FROM pets GROUP BY pet_type;",gpt-3.5-turbo-0125,0.0,
Find the average weight for each pet type.,"SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype","CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3))","SELECT pet_type, AVG(weight) AS average_weight FROM pets GROUP BY pet_type;",gpt-3.5-turbo-0125,0.0,
What is the average weight for each type of pet?,"SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype","CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3))","SELECT AVG(weight) AS average_weight, type_of_pet FROM pets_table GROUP BY type_of_pet;",gpt-3.5-turbo-0125,0.0,
Find the first name and age of students who have a pet.,"SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid","CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3))","SELECT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Pet)",gpt-3.5-turbo-0125,0.0,
What are the different first names and ages of the students who do have pets?,"SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid","CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3))","SELECT DISTINCT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Pets)",gpt-3.5-turbo-0125,0.0,
Find the id of the pet owned by student whose last name is ‘Smith’.,SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith',"CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3))",SELECT PetID FROM Pet WHERE OwnerID IN (SELECT StuID FROM Student WHERE LName = 'Smith'),gpt-3.5-turbo-0125,0.0,
What is the id of the pet owned by the student whose last name is 'Smith'?,SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith',"CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3))",SELECT pet_id FROM PetOwnership WHERE student_id IN (SELECT StuID FROM Student WHERE LName = 'Smith'),gpt-3.5-turbo-0125,0.0,
Find the number of pets for each student who has any pet and student id.,"SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid","CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3))","SELECT StuID, COUNT(*) AS num_pets FROM Pet GROUP BY StuID",gpt-3.5-turbo-0125,0.0,
"For students who have pets , how many pets does each student have ? list their ids instead of names .","select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid","CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3))","SELECT StuID, COUNT(*) AS num_pets FROM Student GROUP BY StuID HAVING COUNT(*) > 0",gpt-3.5-turbo-0125,0.0,
Find the first name and gender of student who have more than one pet.,"SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1","CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3))","SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Pet GROUP BY StuID HAVING COUNT(*) > 1)",gpt-3.5-turbo-0125,0.0,
What is the first name and gender of the all the students who have more than one pet?,"SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1","CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3))","SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Pet GROUP BY StuID HAVING COUNT(*) > 1)",gpt-3.5-turbo-0125,0.0,
Find the last name of the student who has a cat that is age 3.,SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat',"CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3))",SELECT LName FROM Student WHERE Age = 3 AND StuID IN (SELECT StuID FROM Cats WHERE Age = 3),gpt-3.5-turbo-0125,0.0,
What is the last name of the student who has a cat that is 3 years old?,SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat',"CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3))",SELECT LName FROM Student WHERE StuID IN (SELECT StuID FROM Student WHERE Age = 3 AND StuID IN (SELECT StuID FROM Student WHERE Fname = 'cat')) ORDER BY StuID DESC LIMIT 1,gpt-3.5-turbo-0125,0.0,
Find the average age of students who do not have any pet .,select avg(age) from student where stuid not in (select stuid from has_pet),"CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3))",SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Pet),gpt-3.5-turbo-0125,0.0,
What is the average age for all students who do not own any pets ?,select avg(age) from student where stuid not in (select stuid from has_pet),"CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3)); CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LNameVARCHAR(12), FnameVARCHAR(12), AgeINTEGER, SexVARCHAR(1), MajorINTEGER, AdvisorINTEGER, city_codeVARCHAR(3))",SELECT AVG(Age) AS average_age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Pet),gpt-3.5-turbo-0125,0.0,
How many continents are there?,SELECT count(*) FROM CONTINENTS;,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT COUNT(*) FROM continents,gpt-3.5-turbo-0125,0.0,
What is the number of continents?,SELECT count(*) FROM CONTINENTS;,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT COUNT(DISTINCT Continent) AS NumberOfContinents FROM continents;,gpt-3.5-turbo-0125,0.0,
"How many countries does each continent have? List the continent id, continent name and the number of countries.","SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;","CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )","SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) AS num_countries FROM continents LEFT JOIN countries ON continents.ContId = countries.ContId GROUP BY continents.ContId, continents.Continent;",gpt-3.5-turbo-0125,0.0,
"For each continent, list its id, name, and how many countries it has?","SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;","CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )","SELECT ContId, Continent, COUNT(*) AS NumOfCountries FROM continents GROUP BY ContId, Continent;",gpt-3.5-turbo-0125,0.0,
How many countries are listed?,SELECT count(*) FROM COUNTRIES;,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT COUNT(DISTINCT Continent) AS NumberOfCountries FROM continents,gpt-3.5-turbo-0125,0.0,
How many countries exist?,SELECT count(*) FROM COUNTRIES;,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT COUNT(*) AS country_count FROM continents,gpt-3.5-turbo-0125,0.0,
"How many models does each car maker produce? List maker full name, id and the number.","SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;","CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )","SELECT makers.full_name, makers.id, COUNT(models.id) AS number_of_models FROM makers JOIN models ON makers.id = models.maker_id GROUP BY makers.full_name, makers.id;",gpt-3.5-turbo-0125,0.0,
"What is the full name of each car maker, along with its id and how many models it produces?","SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;","CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )","SELECT car_makers.id, car_makers.full_name, COUNT(models.id) AS num_models FROM car_makers JOIN models ON car_makers.id = models.car_maker_id GROUP BY car_makers.id, car_makers.full_name;",gpt-3.5-turbo-0125,0.0,
Which model of the car has the minimum horsepower?,SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT model FROM cars WHERE horsepower = (SELECT MIN(horsepower) FROM cars),gpt-3.5-turbo-0125,0.0,
What is the model of the car with the smallest amount of horsepower?,SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT Model FROM Cars WHERE Horsepower = (SELECT MIN(Horsepower) FROM Cars),gpt-3.5-turbo-0125,0.0,
Find the model of the car whose weight is below the average weight.,SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA),"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT Model FROM Cars WHERE Weight < (SELECT AVG(Weight) FROM Cars),gpt-3.5-turbo-0125,0.0,
What is the model for the car with a weight smaller than the average?,SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA),"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT * FROM car_models WHERE weight < (SELECT AVG(weight) FROM car_models),gpt-3.5-turbo-0125,0.0,
Find the name of the makers that produced some cars in the year of 1970?,SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT DISTINCT Maker FROM cars WHERE Year = 1970,gpt-3.5-turbo-0125,0.0,
What is the name of the different car makers who produced a car in 1970?,SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT DISTINCT Maker FROM Cars WHERE Year = 1970,gpt-3.5-turbo-0125,0.0,
Find the make and production time of the cars that were produced in the earliest year?,"SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);","CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )","SELECT make, production_time FROM cars WHERE production_time = (SELECT MIN(production_time) FROM cars)",gpt-3.5-turbo-0125,0.0,
What is the maker of the carr produced in the earliest year and what year was it?,"SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);","CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )","SELECT maker, MIN(year) FROM cars GROUP BY maker ORDER BY MIN(year) LIMIT 1;",gpt-3.5-turbo-0125,0.0,
Which distinct car models are the produced after 1980?,SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT DISTINCT CarModel FROM Cars WHERE ProductionYear > 1980,gpt-3.5-turbo-0125,0.0,
What are the different models for the cards produced after 1980?,SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT DISTINCT Model FROM cards WHERE ProductionYear > 1980,gpt-3.5-turbo-0125,0.0,
How many car makers are there in each continents? List the continent name and the count.,"SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;","CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )","SELECT Continent, COUNT(*) AS CarMakersCount FROM continents GROUP BY Continent;",gpt-3.5-turbo-0125,0.0,
What is the name of each continent and how many car makers are there in each one?,"SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;","CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )","SELECT continents.Continent, COUNT(car_makers.CarId) AS num_car_makers FROM continents LEFT JOIN car_makers ON continents.ContId = car_makers.ContId GROUP BY continents.Continent;",gpt-3.5-turbo-0125,0.0,
Which of the countries has the most car makers? List the country name.,SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )","SELECT Continent, COUNT(*) AS CarMakers FROM countries GROUP BY Continent ORDER BY CarMakers DESC LIMIT 1",gpt-3.5-turbo-0125,0.0,
What is the name of the country with the most car makers?,SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )","SELECT Continent, COUNT(CarMaker) AS NumCarMakers FROM continents GROUP BY Continent ORDER BY NumCarMakers DESC LIMIT 1",gpt-3.5-turbo-0125,0.0,
How many car models are produced by each maker ? Only list the count and the maker full name .,"select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;","CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )","SELECT COUNT(car_model) AS model_count, maker_full_name FROM car_models GROUP BY maker_full_name;",gpt-3.5-turbo-0125,0.0,
What is the number of car models that are produced by each maker and what is the id and full name of each maker?,"SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;","CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )","SELECT COUNT(car_models.model) AS number_of_models, makers.maker_id, makers.full_name FROM car_models JOIN makers ON car_models.maker_id = makers.maker_id GROUP BY makers.maker_id, makers.full_name;",gpt-3.5-turbo-0125,0.0,
What is the accelerate of the car make amc hornet sportabout (sw)?,SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT accelerate FROM car_table WHERE make = 'amc hornet sportabout (sw)',gpt-3.5-turbo-0125,0.0,
How much does the car accelerate that makes amc hornet sportabout (sw)?,SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT acceleration FROM cars WHERE car_name = 'amc hornet sportabout (sw)',gpt-3.5-turbo-0125,0.0,
How many car makers are there in france?,SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT COUNT(DISTINCT Maker) FROM car_makers WHERE Country = 'France';,gpt-3.5-turbo-0125,0.0,
What is the number of makers of care in France?,SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT COUNT(DISTINCT Maker) FROM care WHERE Country = 'France',gpt-3.5-turbo-0125,0.0,
How many car models are produced in the usa?,SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT COUNT(DISTINCT Model) FROM car_table WHERE Country = 'USA';,gpt-3.5-turbo-0125,0.0,
What is the count of the car models produced in the United States?,SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT COUNT(Model) FROM car_table WHERE Country = 'United States',gpt-3.5-turbo-0125,0.0,
What is the average miles per gallon(mpg) of the cars with 4 cylinders?,SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT AVG(mpg) FROM cars WHERE cylinders = 4;,gpt-3.5-turbo-0125,0.0,
What is the average miles per gallon of all the cards with 4 cylinders?,SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT AVG(mpg) FROM cars WHERE cylinders = 4;,gpt-3.5-turbo-0125,0.0,
What is the smallest weight of the car produced with 8 cylinders on 1974 ?,select min(weight) from cars_data where cylinders  =  8 and year  =  1974,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT MIN(Weight) FROM cars WHERE Cylinders = 8 AND Year = 1974,gpt-3.5-turbo-0125,0.0,
What is the minimum weight of the car with 8 cylinders produced in 1974 ?,select min(weight) from cars_data where cylinders  =  8 and year  =  1974,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT MIN(Weight) FROM cars WHERE Cylinders = 8 AND Year = 1974,gpt-3.5-turbo-0125,0.0,
What are all the makers and models?,"SELECT Maker ,  Model FROM MODEL_LIST;","CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )","SELECT Maker, Model FROM cars",gpt-3.5-turbo-0125,0.0,
What are the makers and models?,"SELECT Maker ,  Model FROM MODEL_LIST;","CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )","SELECT Maker, Model FROM cars",gpt-3.5-turbo-0125,0.0,
What are the countries having at least one car maker? List name and id.,"SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;","CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )","SELECT c.Name, c.Id FROM countries c WHERE c.Id IN (SELECT DISTINCT cm.CountryId FROM car_makers cm)",gpt-3.5-turbo-0125,0.0,
What are the names and ids of all countries with at least one car maker?,"SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;","CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )","SELECT CountryName, CountryId FROM countries WHERE CarMakerCount > 0;",gpt-3.5-turbo-0125,0.0,
What is the number of the cars with horsepower more than 150?,SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT COUNT(*) FROM cars WHERE horsepower > 150,gpt-3.5-turbo-0125,0.0,
What is the number of cars with a horsepower greater than 150?,SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT COUNT(*) FROM cars WHERE horsepower > 150,gpt-3.5-turbo-0125,0.0,
What is the average weight of cars each year?,"SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;","CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT AVG(weight) FROM cars GROUP BY year;,gpt-3.5-turbo-0125,0.0,
What is the average weight and year for each year?,"SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;","CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )","SELECT AVG(weight), year FROM table_name GROUP BY year;",gpt-3.5-turbo-0125,0.0,
Which countries in europe have at least 3 car manufacturers?,SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT Continent FROM continents WHERE Continent = 'Europe' GROUP BY Continent HAVING COUNT(*) >= 3;,gpt-3.5-turbo-0125,0.0,
What are the names of all European countries with at least 3 manufacturers?,SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT CountryName FROM countries WHERE Continent = 'Europe' GROUP BY CountryName HAVING COUNT(DISTINCT Manufacturer) >= 3;,gpt-3.5-turbo-0125,0.0,
What is the maximum horsepower and the make of the car models with 3 cylinders?,"SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;","CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )","SELECT MAX(Horsepower), Make FROM car_models WHERE Cylinders = 3 GROUP BY Make",gpt-3.5-turbo-0125,0.0,
What is the largest amount of horsepower for the models with 3 cylinders and what make is it?,"SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;","CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )","SELECT MAX(Horsepower) AS MaxHorsepower, Make FROM models WHERE Cylinders = 3 GROUP BY Make ORDER BY MaxHorsepower DESC LIMIT 1;",gpt-3.5-turbo-0125,0.0,
"Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT Model FROM Cars ORDER BY MilesPerGallon DESC LIMIT 1,gpt-3.5-turbo-0125,0.0,
What is the car model with the highest mpg ?,select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT car_model FROM cars ORDER BY mpg DESC LIMIT 1,gpt-3.5-turbo-0125,0.0,
What is the average horsepower of the cars before 1980?,SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT AVG(Horsepower) FROM cars WHERE Year < 1980,gpt-3.5-turbo-0125,0.0,
What is the average horsepower for all cars produced before 1980 ?,select avg(horsepower) from cars_data where year  <  1980;,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT AVG(horsepower) FROM cars WHERE year < 1980,gpt-3.5-turbo-0125,0.0,
What is the average edispl of the cars of model volvo?,SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT AVG(edispl) FROM cars WHERE model = 'volvo',gpt-3.5-turbo-0125,0.0,
What is the average edispl for all volvos?,SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT AVG(edispl) FROM table_name WHERE make = 'Volvo';,gpt-3.5-turbo-0125,0.0,
What is the maximum accelerate for different number of cylinders?,"SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;","CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )","SELECT cylinders, MAX(accelerate) AS max_accelerate FROM table_name GROUP BY cylinders;",gpt-3.5-turbo-0125,0.0,
What is the maximum accelerate for all the different cylinders?,"SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;","CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT MAX(accelerate) FROM table_name GROUP BY cylinders;,gpt-3.5-turbo-0125,0.0,
Which model has the most version(make) of cars?,SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )","SELECT model, COUNT(make) AS num_cars FROM cars GROUP BY model ORDER BY num_cars DESC LIMIT 1;",gpt-3.5-turbo-0125,0.0,
What model has the most different versions?,SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )","SELECT model, COUNT(DISTINCT version) AS num_versions FROM table_name GROUP BY model ORDER BY num_versions DESC LIMIT 1;",gpt-3.5-turbo-0125,0.0,
How many cars have more than 4 cylinders?,SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT COUNT(*) FROM cars WHERE cylinders > 4,gpt-3.5-turbo-0125,0.0,
What is the number of cars with more than 4 cylinders?,SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT COUNT(*) FROM cars WHERE cylinders > 4,gpt-3.5-turbo-0125,0.0,
how many cars were produced in 1980?,SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT SUM(Quantity) FROM cars WHERE Year = 1980,gpt-3.5-turbo-0125,0.0,
"In 1980, how many cars were made?",SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT COUNT(*) FROM cars WHERE year = 1980,gpt-3.5-turbo-0125,0.0,
How many car models were produced by the maker with full name American Motor Company?,SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT COUNT(DISTINCT Model) FROM car_models WHERE MakerFullName = 'American Motor Company',gpt-3.5-turbo-0125,0.0,
What is the number of car models created by the car maker American Motor Company?,SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT COUNT(*) AS num_car_models FROM car_models WHERE car_maker = 'American Motor Company',gpt-3.5-turbo-0125,0.0,
Which makers designed more than 3 car models? List full name and the id.,"SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;","CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )","SELECT MakerFullName, MakerId FROM car_models GROUP BY MakerFullName, MakerId HAVING COUNT(ModelId) > 3;",gpt-3.5-turbo-0125,0.0,
What are the names and ids of all makers with more than 3 models?,"SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;","CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )","SELECT Name, Id FROM makers WHERE Models > 3",gpt-3.5-turbo-0125,0.0,
Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?,SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT DISTINCT Model FROM Cars WHERE MakerFullName = 'General Motors' OR Weight > 3500,gpt-3.5-turbo-0125,0.0,
What are the different models created by either the car maker General Motors or weighed more than 3500?,SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT DISTINCT Model FROM cars WHERE Maker = 'General Motors' OR Weight > 3500,gpt-3.5-turbo-0125,0.0,
In which years cars were produced weighing no less than 3000 and no more than 4000 ?,select distinct year from cars_data where weight between 3000 and 4000;,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT DISTINCT Year FROM cars WHERE Weight >= 3000 AND Weight <= 4000,gpt-3.5-turbo-0125,0.0,
What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?,select distinct year from cars_data where weight between 3000 and 4000;,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT DISTINCT Year FROM Cars WHERE Weight < 4000 AND Weight > 3000,gpt-3.5-turbo-0125,0.0,
What is the horsepower of the car with the largest accelerate?,SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT MAX(Horsepower) FROM cars ORDER BY Accelerate DESC LIMIT 1;,gpt-3.5-turbo-0125,0.0,
What is the horsepower of the car with the greatest accelerate?,SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT Horsepower FROM cars ORDER BY Accelerate DESC LIMIT 1,gpt-3.5-turbo-0125,0.0,
"For model volvo, how many cylinders does the car with the least accelerate have?",SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT MIN(Cylinders) FROM volvo WHERE Accelerate = (SELECT MIN(Accelerate) FROM volvo),gpt-3.5-turbo-0125,0.0,
"For a volvo model, how many cylinders does the version with least accelerate have?",SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT MIN(Cylinders) FROM VolvoModels WHERE Accelerate = (SELECT MIN(Accelerate) FROM VolvoModels),gpt-3.5-turbo-0125,0.0,
How many cars have a larger accelerate than the car with the largest horsepower?,SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT COUNT(*) FROM cars WHERE accelerate > (SELECT MAX(horsepower) FROM cars),gpt-3.5-turbo-0125,0.0,
What is the number of cars with a greater accelerate than the one with the most horsepower?,SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT COUNT(*) FROM cars WHERE accelerate > (SELECT MAX(horsepower) FROM cars),gpt-3.5-turbo-0125,0.0,
How many countries has more than 2 car makers ?,select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT COUNT(DISTINCT Country) FROM car_makers GROUP BY Country HAVING COUNT(DISTINCT Maker) > 2,gpt-3.5-turbo-0125,0.0,
What is the number of countries with more than 2 car makers ?,select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )","SELECT COUNT(*) FROM (SELECT Continent, COUNT(DISTINCT CarMaker) AS NumCarMakers FROM continents GROUP BY Continent HAVING NumCarMakers > 2) AS countries_with_more_than_2_car_makers",gpt-3.5-turbo-0125,0.0,
How many cars has over 6 cylinders?,SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT COUNT(*) FROM cars WHERE cylinders > 6,gpt-3.5-turbo-0125,0.0,
What is the number of carsw ith over 6 cylinders?,SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT COUNT(*) FROM cars WHERE cylinders > 6,gpt-3.5-turbo-0125,0.0,
"For the cars with 4 cylinders, which model has the largest horsepower?",SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT model FROM cars WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1;,gpt-3.5-turbo-0125,0.0,
"For all of the 4 cylinder cars, which model has the most horsepower?",SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT model FROM cars WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1,gpt-3.5-turbo-0125,0.0,
"Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.","SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;","CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )","SELECT car.makeid, car.makename FROM car WHERE car.horsepower > (SELECT MIN(horsepower) FROM car) AND car.cylinders <= 3",gpt-3.5-turbo-0125,0.0,
"Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?","select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;","CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )","SELECT MakeId, MakeName FROM Cars WHERE Horsepower > (SELECT MIN(Horsepower) FROM Cars) AND Cylinders < 4",gpt-3.5-turbo-0125,0.0,
What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?,select max(mpg) from cars_data where cylinders  =  8 or year  <  1980,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT MAX(mpg) FROM cars WHERE cylinders = 8 AND year < 1980,gpt-3.5-turbo-0125,0.0,
What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?,select max(mpg) from cars_data where cylinders  =  8 or year  <  1980,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT MAX(mpg) FROM cars WHERE cylinders = 8 OR year < 1980,gpt-3.5-turbo-0125,0.0,
Which models are lighter than 3500 but not built by the 'Ford Motor Company'?,SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT model FROM cars WHERE weight < 3500 AND manufacturer != 'Ford Motor Company',gpt-3.5-turbo-0125,0.0,
What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?,SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT Model FROM cars WHERE Weight < 3500 AND Manufacturer != 'Ford Motor Company',gpt-3.5-turbo-0125,0.0,
What are the name of the countries where there is not a single car maker?,SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT Continent FROM continents WHERE Continent NOT IN (SELECT Continent FROM car_makers),gpt-3.5-turbo-0125,0.0,
What are the names of the countries with no car makers?,SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;,"CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )",SELECT Continent FROM continents WHERE Continent NOT IN (SELECT Continent FROM car_makers),gpt-3.5-turbo-0125,0.0,
Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .,"select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;","CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )","SELECT id, maker FROM car_makers GROUP BY id, maker HAVING COUNT(model) >= 2 AND COUNT(DISTINCT maker) > 3;",gpt-3.5-turbo-0125,0.0,
What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?,"SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;","CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )","SELECT CarId, Maker FROM CarMakers WHERE NumModels >= 2 AND NumCars > 3",gpt-3.5-turbo-0125,0.0,
What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?,"SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';","CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )","SELECT id, name FROM countries WHERE id IN (SELECT country_id FROM car_makers GROUP BY country_id HAVING COUNT(DISTINCT car_maker) > 3) OR id IN (SELECT country_id FROM car_models WHERE model = 'fiat')",gpt-3.5-turbo-0125,0.0,
What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?,"select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';","CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT ); CREATE TABLE ""continents"" ( ""ContId"" INTEGER PRIMARY KEY, ""Continent"" TEXT )","SELECT id, name FROM countries WHERE car_makers > 3 OR model = 'fiat'",gpt-3.5-turbo-0125,0.0,
"Which country does Airline ""JetBlue Airways"" belong to?","SELECT Country FROM AIRLINES WHERE Airline  =  ""JetBlue Airways""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways';,gpt-3.5-turbo-0125,0.0,
What country is Jetblue Airways affiliated with?,"SELECT Country FROM AIRLINES WHERE Airline  =  ""JetBlue Airways""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT Country FROM airlines WHERE Airline = 'Jetblue Airways',gpt-3.5-turbo-0125,0.0,
"What is the abbreviation of Airline ""JetBlue Airways""?","SELECT Abbreviation FROM AIRLINES WHERE Airline  =  ""JetBlue Airways""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways';,gpt-3.5-turbo-0125,0.0,
Which abbreviation corresponds to Jetblue Airways?,"SELECT Abbreviation FROM AIRLINES WHERE Airline  =  ""JetBlue Airways""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways';,gpt-3.5-turbo-0125,0.0,
"List all airline names and their abbreviations in ""USA"".","SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  ""USA""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)","SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';",gpt-3.5-turbo-0125,0.0,
What are the airline names and abbreviations for airlines in the USA?,"SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  ""USA""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)","SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';",gpt-3.5-turbo-0125,0.0,
List the airport code and name in the city of Anthony.,"SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  ""Anthony""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)","SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';",gpt-3.5-turbo-0125,0.0,
Give the airport code and airport name corresonding to the city Anthony.,"SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  ""Anthony""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)","SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';",gpt-3.5-turbo-0125,0.0,
How many airlines do we have?,SELECT count(*) FROM AIRLINES,"CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT COUNT(*) AS total_airlines FROM airlines,gpt-3.5-turbo-0125,0.0,
What is the total number of airlines?,SELECT count(*) FROM AIRLINES,"CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT COUNT(*) AS total_airlines FROM airlines,gpt-3.5-turbo-0125,0.0,
How many airports do we have?,SELECT count(*) FROM AIRPORTS,"CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT COUNT(*) FROM airports,gpt-3.5-turbo-0125,0.0,
Return the number of  airports.,SELECT count(*) FROM AIRPORTS,"CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT COUNT(*) FROM airports,gpt-3.5-turbo-0125,0.0,
How many flights do we have?,SELECT count(*) FROM FLIGHTS,"CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT COUNT(*) FROM airlines,gpt-3.5-turbo-0125,0.0,
Return the number of flights.,SELECT count(*) FROM FLIGHTS,"CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT COUNT(*) FROM airlines,gpt-3.5-turbo-0125,0.0,
Which airline has abbreviation 'UAL'?,"SELECT Airline FROM AIRLINES WHERE Abbreviation  =  ""UAL""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT Airline FROM airlines WHERE Abbreviation = 'UAL',gpt-3.5-turbo-0125,0.0,
Give the airline with abbreviation 'UAL'.,"SELECT Airline FROM AIRLINES WHERE Abbreviation  =  ""UAL""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';,gpt-3.5-turbo-0125,0.0,
How many airlines are from USA?,"SELECT count(*) FROM AIRLINES WHERE Country  =  ""USA""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT COUNT(*) FROM airlines WHERE Country = 'USA',gpt-3.5-turbo-0125,0.0,
Return the number of airlines in the USA.,"SELECT count(*) FROM AIRLINES WHERE Country  =  ""USA""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT COUNT(*) FROM airlines WHERE Country = 'USA';,gpt-3.5-turbo-0125,0.0,
Which city and country is the Alton airport at?,"SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  ""Alton""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)","SELECT City, Country FROM airports WHERE Airport = 'Alton'",gpt-3.5-turbo-0125,0.0,
Give the city and country for the Alton airport.,"SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  ""Alton""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)","SELECT City, Country FROM airports WHERE Airport = 'Alton'",gpt-3.5-turbo-0125,0.0,
What is the airport name for airport 'AKO'?,"SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  ""AKO""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT AirportName FROM airports WHERE AirportCode = 'AKO',gpt-3.5-turbo-0125,0.0,
Return the name of the airport with code 'AKO'.,"SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  ""AKO""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT Airline FROM airlines WHERE Abbreviation = 'AKO';,gpt-3.5-turbo-0125,0.0,
What are airport names at City 'Aberdeen'?,"SELECT AirportName FROM AIRPORTS WHERE City = ""Aberdeen""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT AirportName FROM airports WHERE City = 'Aberdeen',gpt-3.5-turbo-0125,0.0,
What are the names of airports in Aberdeen?,"SELECT AirportName FROM AIRPORTS WHERE City = ""Aberdeen""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT Airline FROM airlines WHERE Country = 'Aberdeen',gpt-3.5-turbo-0125,0.0,
How many flights depart from 'APG'?,"SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  ""APG""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT COUNT(*) FROM airlines WHERE Departure = 'APG',gpt-3.5-turbo-0125,0.0,
Count the number of flights departing from 'APG'.,"SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  ""APG""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT COUNT(*) FROM airlines WHERE Departure = 'APG';,gpt-3.5-turbo-0125,0.0,
How many flights have destination ATO?,"SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  ""ATO""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT COUNT(*) FROM flights WHERE destination = 'ATO';,gpt-3.5-turbo-0125,0.0,
Count the number of flights into ATO.,"SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  ""ATO""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT COUNT(*) FROM airlines WHERE Country = 'ATO',gpt-3.5-turbo-0125,0.0,
How many flights depart from City Aberdeen?,"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  ""Aberdeen""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT COUNT(*) FROM flights WHERE DepartureCity = 'Aberdeen',gpt-3.5-turbo-0125,0.0,
Return the number of flights departing from Aberdeen.,"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  ""Aberdeen""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT COUNT(*) FROM airlines WHERE Departure = 'Aberdeen',gpt-3.5-turbo-0125,0.0,
How many flights arriving in Aberdeen city?,"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  ""Aberdeen""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT COUNT(*) FROM airlines WHERE City = 'Aberdeen' AND Direction = 'Arriving',gpt-3.5-turbo-0125,0.0,
Return the number of flights arriving in Aberdeen.,"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  ""Aberdeen""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT COUNT(*) FROM airlines WHERE Country = 'Aberdeen' AND Arriving = 1;,gpt-3.5-turbo-0125,0.0,
How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?,"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  ""Ashley"" AND T3.City  =  ""Aberdeen""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT COUNT(*) FROM flights WHERE DepartureCity = 'Aberdeen' AND DestinationCity = 'Ashley',gpt-3.5-turbo-0125,0.0,
How many flights fly from Aberdeen to Ashley?,"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  ""Ashley"" AND T3.City  =  ""Aberdeen""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT COUNT(*) FROM flights WHERE origin = 'Aberdeen' AND destination = 'Ashley',gpt-3.5-turbo-0125,0.0,
How many flights does airline 'JetBlue Airways' have?,"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = ""JetBlue Airways""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT COUNT(*) FROM airlines WHERE Airline = 'JetBlue Airways';,gpt-3.5-turbo-0125,0.0,
Give the number of Jetblue Airways flights.,"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = ""JetBlue Airways""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT COUNT(*) FROM airlines WHERE Airline = 'Jetblue Airways',gpt-3.5-turbo-0125,0.0,
How many 'United Airlines' flights go to Airport 'ASY'?,"SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  ""United Airlines"" AND T2.DestAirport  =  ""ASY""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT COUNT(*) FROM airlines WHERE Airline = 'United Airlines' AND Airport = 'ASY',gpt-3.5-turbo-0125,0.0,
Count the number of United Airlines flights arriving in ASY Airport.,"SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  ""United Airlines"" AND T2.DestAirport  =  ""ASY""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT COUNT(*) FROM airlines WHERE Airline = 'United Airlines' AND Country = 'ASY' AND Airport = 'Arriving',gpt-3.5-turbo-0125,0.0,
How many 'United Airlines' flights depart from Airport 'AHD'?,"SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  ""United Airlines"" AND T2.SourceAirport  =  ""AHD""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT COUNT(*) FROM airlines WHERE Airline = 'United Airlines' AND DepartureAirport = 'AHD',gpt-3.5-turbo-0125,0.0,
Return the number of United Airlines flights leaving from AHD Airport.,"SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  ""United Airlines"" AND T2.SourceAirport  =  ""AHD""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT COUNT(*) FROM airlines WHERE Airline = 'United Airlines' AND Country = 'AHD' AND Abbreviation = 'AHD',gpt-3.5-turbo-0125,0.0,
How many United Airlines flights go to City 'Aberdeen'?,"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  ""Aberdeen"" AND T3.Airline  =  ""United Airlines""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT COUNT(*) FROM airlines WHERE Airline = 'United Airlines' AND Country = 'Aberdeen',gpt-3.5-turbo-0125,0.0,
Count the number of United Airlines flights that arrive in Aberdeen.,"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  ""Aberdeen"" AND T3.Airline  =  ""United Airlines""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT COUNT(*) FROM airlines WHERE Airline = 'United Airlines' AND Country = 'Aberdeen' AND Abbreviation = 'UA',gpt-3.5-turbo-0125,0.0,
Which city has most number of arriving flights?,SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1,"CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)","SELECT City, COUNT(*) AS NumArrivingFlights FROM airlines GROUP BY City ORDER BY NumArrivingFlights DESC LIMIT 1;",gpt-3.5-turbo-0125,0.0,
Which city has the most frequent destination airport?,SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1,"CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)","SELECT city, COUNT(destination_airport) AS frequency FROM flights GROUP BY city ORDER BY frequency DESC LIMIT 1",gpt-3.5-turbo-0125,0.0,
Which city has most number of departing flights?,SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1,"CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)","SELECT city, COUNT(*) AS num_departing_flights FROM flights GROUP BY city ORDER BY num_departing_flights DESC LIMIT 1;",gpt-3.5-turbo-0125,0.0,
Which city is the most frequent source airport?,SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1,"CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)","SELECT source_airport_city, COUNT(source_airport_city) AS frequency FROM airlines GROUP BY source_airport_city ORDER BY frequency DESC LIMIT 1;",gpt-3.5-turbo-0125,0.0,
What is the code of airport that has the highest number of flights?,SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1,"CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT code FROM airports ORDER BY flights DESC LIMIT 1,gpt-3.5-turbo-0125,0.0,
What is the airport code of the airport with the most flights?,SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1,"CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT Abbreviation AS airport_code FROM airlines GROUP BY Abbreviation ORDER BY COUNT(*) DESC LIMIT 1,gpt-3.5-turbo-0125,0.0,
What is the code of airport that has fewest number of flights?,SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1,"CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT code FROM airports ORDER BY num_flights ASC LIMIT 1;,gpt-3.5-turbo-0125,0.0,
Give the code of the airport with the least flights.,SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1,"CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT code FROM airports ORDER BY flights ASC LIMIT 1;,gpt-3.5-turbo-0125,0.0,
Which airline has most number of flights?,SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1,"CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)","SELECT Airline, COUNT(*) AS num_flights FROM airlines GROUP BY Airline ORDER BY num_flights DESC LIMIT 1;",gpt-3.5-turbo-0125,0.0,
What airline serves the most flights?,SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1,"CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)","SELECT Airline, COUNT(*) AS num_flights FROM airlines GROUP BY Airline ORDER BY num_flights DESC LIMIT 1;",gpt-3.5-turbo-0125,0.0,
Find the abbreviation and country of the airline that has fewest number of flights?,"SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)","SELECT Abbreviation, Country FROM airlines GROUP BY Abbreviation, Country ORDER BY COUNT(*) ASC LIMIT 1;",gpt-3.5-turbo-0125,0.0,
What is the abbreviation of the airilne has the fewest flights and what country is it in?,"SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)","SELECT Abbreviation, Country FROM airlines GROUP BY Abbreviation, Country ORDER BY COUNT(*) ASC LIMIT 1;",gpt-3.5-turbo-0125,0.0,
What are airlines that have some flight departing from airport 'AHD'?,"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  ""AHD""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT Airline FROM airlines WHERE uid IN (SELECT DISTINCT airline_uid FROM flights WHERE departure_airport = 'AHD'),gpt-3.5-turbo-0125,0.0,
Which airlines have a flight with source airport AHD?,"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  ""AHD""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT Airline FROM airlines WHERE SourceAirport = 'AHD',gpt-3.5-turbo-0125,0.0,
What are airlines that have flights arriving at airport 'AHD'?,"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  ""AHD""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT Airline FROM airlines WHERE uid IN (SELECT uid FROM flights WHERE arrival_airport = 'AHD'),gpt-3.5-turbo-0125,0.0,
Which airlines have a flight with destination airport AHD?,"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  ""AHD""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT Airline FROM airlines WHERE DestinationAirport = 'AHD',gpt-3.5-turbo-0125,0.0,
Find all airlines that have flights from both airports 'APG' and 'CVO'.,"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  ""APG"" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  ""CVO""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT Airline FROM airlines WHERE Airline IN (SELECT Airline FROM flights WHERE Airport = 'APG') AND Airline IN (SELECT Airline FROM flights WHERE Airport = 'CVO'),gpt-3.5-turbo-0125,0.0,
Which airlines have departing flights from both APG and CVO airports?,"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  ""APG"" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  ""CVO""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT Airline FROM airlines WHERE DepartingAirport = 'APG' INTERSECT SELECT Airline FROM airlines WHERE DepartingAirport = 'CVO';,gpt-3.5-turbo-0125,0.0,
Find all airlines that have flights from airport 'CVO' but not from 'APG'.,"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  ""CVO"" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  ""APG""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT Airline FROM airlines WHERE Airline IN (SELECT Airline FROM flights WHERE DepartureAirport = 'CVO') AND Airline NOT IN (SELECT Airline FROM flights WHERE DepartureAirport = 'APG'),gpt-3.5-turbo-0125,0.0,
Which airlines have departures from CVO but not from APG airports?,"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  ""CVO"" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  ""APG""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT Airline FROM airlines WHERE Departure = 'CVO' AND Airline NOT IN (SELECT Airline FROM airlines WHERE Departure = 'APG'),gpt-3.5-turbo-0125,0.0,
Find all airlines that have at least 10 flights.,SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10,"CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT Airline FROM airlines GROUP BY Airline HAVING COUNT(*) >= 10;,gpt-3.5-turbo-0125,0.0,
Which airlines have at least 10 flights?,SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10,"CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT Airline FROM airlines GROUP BY Airline HAVING COUNT(*) >= 10;,gpt-3.5-turbo-0125,0.0,
Find all airlines that have fewer than 200 flights.,SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200,"CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT Airline FROM airlines GROUP BY Airline HAVING COUNT(*) < 200;,gpt-3.5-turbo-0125,0.0,
Which airlines have less than 200 flights?,SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200,"CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT Airline FROM airlines GROUP BY Airline HAVING COUNT(*) < 200;,gpt-3.5-turbo-0125,0.0,
"What are flight numbers of Airline ""United Airlines""?","SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  ""United Airlines""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT flight_number FROM flights WHERE Airline = 'United Airlines',gpt-3.5-turbo-0125,0.0,
Which flight numbers correspond to United Airlines flights?,"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  ""United Airlines""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT FlightNumber FROM flights WHERE Airline = 'United Airlines',gpt-3.5-turbo-0125,0.0,
"What are flight numbers of flights departing from Airport ""APG""?","SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  ""APG""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT flight_number FROM flights WHERE departure_airport = 'APG',gpt-3.5-turbo-0125,0.0,
Give the flight numbers of flights leaving from APG.,"SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  ""APG""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT flight_number FROM flights WHERE departure_airport = 'APG',gpt-3.5-turbo-0125,0.0,
"What are flight numbers of flights arriving at Airport ""APG""?","SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  ""APG""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT flight_number FROM flights WHERE arrival_airport = 'APG',gpt-3.5-turbo-0125,0.0,
Give the flight numbers of flights landing at APG.,"SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  ""APG""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT flight_number FROM flights WHERE destination = 'APG',gpt-3.5-turbo-0125,0.0,
"What are flight numbers of flights departing from City ""Aberdeen ""?","SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  ""Aberdeen""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT flight_number FROM flights WHERE departure_city = 'Aberdeen',gpt-3.5-turbo-0125,0.0,
Give the flight numbers of flights leaving from Aberdeen.,"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  ""Aberdeen""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT flight_number FROM flights WHERE departure_city = 'Aberdeen',gpt-3.5-turbo-0125,0.0,
"What are flight numbers of flights arriving at City ""Aberdeen""?","SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  ""Aberdeen""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT flight_number FROM flights WHERE arrival_city = 'Aberdeen',gpt-3.5-turbo-0125,0.0,
Give the flight numbers of flights arriving in Aberdeen.,"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  ""Aberdeen""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT flight_number FROM flights WHERE destination = 'Aberdeen',gpt-3.5-turbo-0125,0.0,
Find the number of flights landing in the city of Aberdeen or Abilene.,"SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  ""Aberdeen"" OR T2.city  =  ""Abilene""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT COUNT(*) FROM flights WHERE destination_city = 'Aberdeen' OR destination_city = 'Abilene';,gpt-3.5-turbo-0125,0.0,
How many flights land in Aberdeen or Abilene?,"SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  ""Aberdeen"" OR T2.city  =  ""Abilene""","CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT COUNT(*) FROM flights WHERE destination = 'Aberdeen' OR destination = 'Abilene',gpt-3.5-turbo-0125,0.0,
Find the name of airports which do not have any flight in and out.,SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights),"CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT Airline FROM airlines WHERE Airline NOT IN (SELECT DISTINCT Airline FROM flights),gpt-3.5-turbo-0125,0.0,
Which airports do not have departing or arriving flights?,SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights),"CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT); CREATE TABLE 'airlines' (uid INTEGER PRIMARY KEY, Airline TEXT, Abbreviation TEXT, Country TEXT)",SELECT Airline FROM airlines WHERE Airline NOT IN (SELECT DISTINCT Airline FROM departing_flights UNION SELECT DISTINCT Airline FROM arriving_flights),gpt-3.5-turbo-0125,0.0,
How many employees are there?,SELECT count(*) FROM employee,"CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID""))",SELECT COUNT(*) AS total_employees FROM employee,gpt-3.5-turbo-0125,0.0,
Count the number of employees,SELECT count(*) FROM employee,"CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID""))",SELECT COUNT(*) AS num_employees FROM employee,gpt-3.5-turbo-0125,0.0,
Sort employee names by their age in ascending order.,SELECT name FROM employee ORDER BY age,"CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID""))",SELECT Name FROM employee ORDER BY Age ASC;,gpt-3.5-turbo-0125,0.0,
List the names of employees and sort in ascending order of age.,SELECT name FROM employee ORDER BY age,"CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID""))",SELECT Name FROM employee ORDER BY Age ASC,gpt-3.5-turbo-0125,0.0,
What is the number of employees from each city?,"SELECT count(*) ,  city FROM employee GROUP BY city","CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID""))","SELECT City, COUNT(*) AS Number_of_Employees FROM employee GROUP BY City;",gpt-3.5-turbo-0125,0.0,
Count the number of employees for each city.,"SELECT count(*) ,  city FROM employee GROUP BY city","CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID""))","SELECT City, COUNT(Employee_ID) AS num_employees FROM employee GROUP BY City;",gpt-3.5-turbo-0125,0.0,
Which cities do more than one employee under age 30 come from?,SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1,"CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID""))",SELECT City FROM employee GROUP BY City HAVING COUNT(*) > 1 AND MAX(Age) < 30,gpt-3.5-turbo-0125,0.0,
Find the cities that have more than one employee under age 30.,SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1,"CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID""))",SELECT City FROM employee GROUP BY City HAVING COUNT(*) > 1 AND MAX(Age) < 30;,gpt-3.5-turbo-0125,0.0,
Find the number of shops in each location.,"SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION","CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID""))","SELECT City, COUNT(*) AS Number_of_Shops FROM employee GROUP BY City;",gpt-3.5-turbo-0125,0.0,
How many shops are there in each location?,"SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION","CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID""))","SELECT City, COUNT(*) AS Number_of_Shops FROM employee GROUP BY City;",gpt-3.5-turbo-0125,0.0,
Find the manager name and district of the shop whose number of products is the largest.,"SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1","CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID""))","SELECT manager_name, district FROM shop ORDER BY number_of_products DESC LIMIT 1",gpt-3.5-turbo-0125,0.0,
What are the manager name and district of the shop that sells the largest number of products?,"SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1","CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID""))","SELECT manager_name, district FROM shop WHERE shop_id IN (SELECT shop_id FROM sells GROUP BY shop_id ORDER BY COUNT(product_id) DESC LIMIT 1)",gpt-3.5-turbo-0125,0.0,
find the minimum and maximum number of products of all stores.,"SELECT min(Number_products) ,  max(Number_products) FROM shop","CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID""))","SELECT MIN(products) AS min_products, MAX(products) AS max_products FROM (SELECT COUNT(*) AS products FROM stores GROUP BY store_id) AS product_count",gpt-3.5-turbo-0125,0.0,
What are the minimum and maximum number of products across all the shops?,"SELECT min(Number_products) ,  max(Number_products) FROM shop","CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID""))","SELECT MIN(products) AS min_products, MAX(products) AS max_products FROM (SELECT COUNT(*) AS products FROM shops GROUP BY shop_id) AS product_count",gpt-3.5-turbo-0125,0.0,
"Return the name, location and district of all shops in descending order of number of products.","SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC","CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID""))","SELECT name, location, district FROM shops ORDER BY number_of_products DESC",gpt-3.5-turbo-0125,0.0,
"Sort all the shops by number products in descending order, and return the name, location and district of each shop.","SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC","CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID""))","SELECT name, location, district FROM shops ORDER BY number_products DESC",gpt-3.5-turbo-0125,0.0,
Find the names of stores whose number products is more than the average number of products.,SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop),"CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID""))",SELECT Name FROM stores WHERE number_of_products > (SELECT AVG(number_of_products) FROM stores),gpt-3.5-turbo-0125,0.0,
Which shops' number products is above the average? Give me the shop names.,SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop),"CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID""))",SELECT Name FROM Shops GROUP BY Name HAVING COUNT(Products) > (SELECT AVG(Products) FROM Shops),gpt-3.5-turbo-0125,0.0,
find the name of employee who was awarded the most times in the evaluation.,SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1,"CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID""))",SELECT Name FROM employee GROUP BY Name ORDER BY COUNT(*) DESC LIMIT 1,gpt-3.5-turbo-0125,0.0,
Which employee received the most awards in evaluations? Give me the employee name.,SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1,"CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID""))",SELECT Name FROM employee WHERE Employee_ID IN (SELECT Employee_ID FROM evaluations GROUP BY Employee_ID ORDER BY COUNT(*) DESC LIMIT 1),gpt-3.5-turbo-0125,0.0,
Find the name of the employee who got the highest one time bonus.,SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1,"CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID""))",SELECT Name FROM employee ORDER BY one_time_bonus DESC LIMIT 1,gpt-3.5-turbo-0125,0.0,
Which employee received the biggest bonus? Give me the employee name.,SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1,"CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID""))",SELECT Name FROM employee ORDER BY Bonus DESC LIMIT 1,gpt-3.5-turbo-0125,0.0,
Find the names of employees who never won any award in the evaluation.,SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation),"CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID""))",SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM awards),gpt-3.5-turbo-0125,0.0,
What are the names of the employees who never received any evaluation?,SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation),"CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID""))",SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation),gpt-3.5-turbo-0125,0.0,
What is the name of the shop that is hiring the largest number of employees?,SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1,"CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID""))",SELECT Name FROM shop WHERE Shop_ID = (SELECT Shop_ID FROM employee GROUP BY Shop_ID ORDER BY COUNT(*) DESC LIMIT 1),gpt-3.5-turbo-0125,0.0,
Which shop has the most employees? Give me the shop name.,SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1,"CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID""))",SELECT Name AS shop_name FROM employee GROUP BY Name ORDER BY COUNT(*) DESC LIMIT 1,gpt-3.5-turbo-0125,0.0,
Find the name of the shops that do not hire any employee.,SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring),"CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID""))",SELECT Name FROM shop WHERE shop_id NOT IN (SELECT DISTINCT shop_id FROM employee),gpt-3.5-turbo-0125,0.0,
Which shops run with no employees? Find the shop names,SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring),"CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID""))",SELECT shop_name FROM shops WHERE NOT EXISTS (SELECT * FROM employees WHERE employees.shop_id = shops.shop_id),gpt-3.5-turbo-0125,0.0,
Find the number of employees hired in each shop; show the shop name as well.,"SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name","CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID""))","SELECT shop_name, COUNT(Employee_ID) AS num_employees_hired FROM employee GROUP BY shop_name;",gpt-3.5-turbo-0125,0.0,
"For each shop, return the number of employees working there and the name of the shop.","SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name","CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID""))","SELECT COUNT(Employee_ID) AS num_employees, Name AS shop_name FROM employee GROUP BY Name",gpt-3.5-turbo-0125,0.0,
What is total bonus given in all evaluations?,SELECT sum(bonus) FROM evaluation,"CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID""))",SELECT SUM(bonus) AS total_bonus FROM evaluations,gpt-3.5-turbo-0125,0.0,
Find the total amount of bonus given in all the evaluations.,SELECT sum(bonus) FROM evaluation,"CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID""))",SELECT SUM(bonus) AS total_bonus FROM evaluations,gpt-3.5-turbo-0125,0.0,
Give me all the information about hiring.,SELECT * FROM hiring,"CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID""))",SELECT * FROM employee WHERE City = 'hiring',gpt-3.5-turbo-0125,0.0,
What is all the information about hiring?,SELECT * FROM hiring,"CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID""))",SELECT * FROM employee WHERE City = 'hiring',gpt-3.5-turbo-0125,0.0,
Which district has both stores with less than 3000 products and stores with more than 10000 products?,SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000,"CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID""))",SELECT district FROM stores WHERE products < 3000 AND district IN (SELECT district FROM stores WHERE products > 10000),gpt-3.5-turbo-0125,0.0,
Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.,SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000,"CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID""))",SELECT District FROM Shops WHERE Products < 3000 AND District IN (SELECT District FROM Shops WHERE Products > 10000),gpt-3.5-turbo-0125,0.0,
How many different store locations are there?,SELECT count(DISTINCT LOCATION) FROM shop,"CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID""))",SELECT COUNT(DISTINCT City) AS num_locations FROM employee,gpt-3.5-turbo-0125,0.0,
Count the number of distinct store locations.,SELECT count(DISTINCT LOCATION) FROM shop,"CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID"")); CREATE TABLE ""employee"" (""Employee_ID"" int,""Name"" text,""Age"" int,""City"" text,PRIMARY KEY (""Employee_ID""))",SELECT COUNT(DISTINCT City) AS num_distinct_store_locations FROM employee,gpt-3.5-turbo-0125,0.0,
How many documents do we have?,SELECT count(*) FROM Documents,"CREATE TABLE Ref_Template_Types (Template_Type_Code CHAR(15) NOT NULL,Template_Type_Description VARCHAR(255) NOT NULL,PRIMARY KEY (Template_Type_Code)); CREATE TABLE Ref_Template_Types (Template_Type_Code CHAR(15) NOT NULL,Template_Type_Description VARCHAR(255) NOT NULL,PRIMARY KEY (Template_Type_Code)); CREATE TABLE Ref_Template_Types (Template_Type_Code CHAR(15) NOT NULL,Template_Type_Description VARCHAR(255) NOT NULL,PRIMARY KEY (Template_Type_Code)); CREATE TABLE Ref_Template_Types (Template_Type_Code CHAR(15) NOT NULL,Template_Type_Description VARCHAR(255) NOT NULL,PRIMARY KEY (Template_Type_Code))",SELECT COUNT(*) AS document_count FROM Ref_Template_Types,gpt-3.5-turbo-0125,0.0,
Count the number of documents.,SELECT count(*) FROM Documents,"CREATE TABLE Ref_Template_Types (Template_Type_Code CHAR(15) NOT NULL,Template_Type_Description VARCHAR(255) NOT NULL,PRIMARY KEY (Template_Type_Code)); CREATE TABLE Ref_Template_Types (Template_Type_Code CHAR(15) NOT NULL,Template_Type_Description VARCHAR(255) NOT NULL,PRIMARY KEY (Template_Type_Code)); CREATE TABLE Ref_Template_Types (Template_Type_Code CHAR(15) NOT NULL,Template_Type_Description VARCHAR(255) NOT NULL,PRIMARY KEY (Template_Type_Code)); CREATE TABLE Ref_Template_Types (Template_Type_Code CHAR(15) NOT NULL,Template_Type_Description VARCHAR(255) NOT NULL,PRIMARY KEY (Template_Type_Code))",SELECT COUNT(*) FROM Ref_Template_Types;,gpt-3.5-turbo-0125,0.0,
"List document IDs, document names, and document descriptions for all documents.","SELECT document_id ,  document_name ,  document_description FROM Documents","CREATE TABLE Ref_Template_Types (Template_Type_Code CHAR(15) NOT NULL,Template_Type_Description VARCHAR(255) NOT NULL,PRIMARY KEY (Template_Type_Code)); CREATE TABLE Ref_Template_Types (Template_Type_Code CHAR(15) NOT NULL,Template_Type_Description VARCHAR(255) NOT NULL,PRIMARY KEY (Template_Type_Code)); CREATE TABLE Ref_Template_Types (Template_Type_Code CHAR(15) NOT NULL,Template_Type_Description VARCHAR(255) NOT NULL,PRIMARY KEY (Template_Type_Code)); CREATE TABLE Ref_Template_Types (Template_Type_Code CHAR(15) NOT NULL,Template_Type_Description VARCHAR(255) NOT NULL,PRIMARY KEY (Template_Type_Code))","SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;",gpt-3.5-turbo-0125,0.0,
